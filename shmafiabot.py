import asyncio
import enum
import os
import random
import re
from typing import Union, List

import peewee
import pyrogram
from pyrogram import filters, types
from pyrogram.handlers import MessageHandler

from db import User, GroupAffiliation, RestrictedUser, Config

# bot = Client('shmafiabot', os.getenv('API_ID'), os.getenv('API_HASH'), bot_token=os.getenv('BOT_TOKEN'))

CHAT_ID = int(os.getenv('CHAT_ID'))


def text_command(strings: Union[str, List[str]]):
    return chat_command(strings, prefix='')


def chat_command(commands: Union[str, List[str]], prefix: Union[str, List[str]] = 0):
    kwargs = {}
    if prefix != 0:
        kwargs['prefixes'] = prefix
    return filters.command(commands, **kwargs) & filters.chat(CHAT_ID)


def admin_command(commands: Union[str, List[str]]):
    return chat_command(commands) & filters.user([356786682, 633834276, 209007669])  # —è—Å—è, –ú–∞—Ä—å—è–º, –¥–µ–¥


class PingGroup(enum.Enum):
    ALL = 1
    DORM = 2


class ConfigKey:
    ANTI_FISHING = 'anti_fishing'
    ANTI_PIPISA_ADS = 'anti_pipisa_ads'


async def promote_member(chat, author):
    await chat.promote_member(
        user_id=author.id,
        privileges=types.ChatPrivileges(
            can_invite_users=True
        )
    )


class ShmafiaBot:
    def __init__(
            self,
            name: str,
            api_id: Union[int, str] = None,
            api_hash: str = None,
            bot_token: str = None
    ):
        self.bot = pyrogram.Client(name, api_id, api_hash, bot_token=bot_token)
        self.config = {
            ConfigKey.ANTI_FISHING: Config.get(Config.key == ConfigKey.ANTI_FISHING),
            ConfigKey.ANTI_PIPISA_ADS: Config.get(Config.key == ConfigKey.ANTI_PIPISA_ADS),
        }

    async def _set_title(self, message, chat, author, title):
        for _ in range(2):
            try:
                return await self.bot.set_administrator_title(
                    chat_id=chat.id,
                    user_id=author.id,
                    title=title
                )
            except pyrogram.errors.exceptions.bad_request_400.ChatAdminRequired:
                await message.reply("–ù–µ —Å–º–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞—à–∫—É."
                                    "\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
                                    "\n- –Ø –Ω–µ —É–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
                                    "\n- –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
                                    "\n- –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–Ω—è—Ç—å —Å —Å–µ–±—è —Ä–æ–ª—å")
                return False
            except pyrogram.errors.exceptions.bad_request_400.UserCreator:
                await message.reply("–Ø –Ω–µ –º–æ–≥—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –í–∞—à—É –ø–ª–∞—à–∫—É")
                return False
            except pyrogram.errors.exceptions.bad_request_400.AdminRankInvalid:
                await message.reply("–£ –í–∞—Å –ø–ª–∞—à–∫–∞ –¥–ª–∏–Ω–Ω–µ–µ 16 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è")
                return False
            except ValueError:
                await promote_member(chat, author)

    # @bot.on_message(chat_command(["set_nametag", "change_nametag"]))
    async def set_title_command(self, _, message: types.Message):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞—à–∫—É.

        :param message:
        :return:
        """
        author = message.from_user

        if RestrictedUser.get_or_none(RestrictedUser.user_id == author.id):
            await message.reply("–í–∞–º –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å –ø–ª–∞—à–∫—É")
            return

        args = message.command[1:]
        if not args:
            await message.reply("–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—à–∫–∏.")
            return

        title = ' '.join(args)

        chat = message.chat

        if result := await self._set_title(message, chat, author, title):
            await message.reply(f"–í–∞—à–∞ –ø–ª–∞—à–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ `{title}`.")
        elif result is False:
            pass
        else:
            print(result)
            await message.reply(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

    # @bot.on_message(admin_command(["restrict_member", "unrestrict_member"]))
    async def un_restrict_member_command(self, _, message: types.Message):
        """
        –†–∞–∑—Ä–µ—à–∏—Ç—å –∏–ª–∏ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫—É –∏–∑–º–µ–Ω—è—Ç—å –ø–ª–∞—à–∫—É

        :param message:
        :return:
        """
        if entities := message.entities:
            if len(entities) < 2:
                await message.reply("No arguments provided", quote=True)
                return

            to_restrict = False if message.command[0].startswith('un') else True
            entity = entities[1]
            chat = message.chat
            member = None

            if entity.type == 'mention':
                offset = entity.offset
                member = message.text[offset:offset + entity.length]
                try:
                    member = await chat.get_member(member)
                except pyrogram.errors.exceptions.bad_request_400.UserNotParticipant:
                    await message.reply("Specified user is not a member of this chat.")
                    return
                member = member.user
            elif entity.type == 'text_mention':
                member = entity.user

            if member:
                if to_restrict:
                    try:
                        RestrictedUser.create(user_id=member.id)
                    except peewee.IntegrityError:
                        await message.reply("Specified member is already restricted.")
                        return
                else:
                    if not RestrictedUser.delete().where(RestrictedUser.user_id == member.id).execute():
                        await message.reply("Specified member is not restricted.")
                        return
                await message.reply(f"Successfully {'un' if not to_restrict else ''}restricted access to the specified user.")
            else:
                await message.reply(f"No new users have been {'un' if not to_restrict else ''}restricted.")

    async def ping_func(self, message: types.Message, group: PingGroup):
        chat = message.chat
        match group:
            case PingGroup.DORM:
                mentions = []
                for user_id in [_.user_id_id for _ in GroupAffiliation.select(GroupAffiliation.user_id_id).join(User).where(GroupAffiliation.mention_group_id == 1 & User.member)]:
                    try:
                        mentions.append(await self.bot.get_users(user_id))
                    except KeyError as e:
                        print('keyerror' + str(e))
                    except pyrogram.errors.exceptions.bad_request_400.PeerIdInvalid:
                        print("peerinvalid")
                # mentions = [user.mention for user in
                #             (await self.bot.get_users(
                #                 [_.user_id_id for _ in GroupAffiliation.select(GroupAffiliation.user_id_id).join(User).where(GroupAffiliation.mention_group_id == 1 & User.member)]))]
                text_part = "–æ—Ç–º–µ—Ç–∏—Ç—å –æ–±—â–∞–∂–Ω–∏–∫–æ–≤"
            case PingGroup.ALL | _:
                mentions = [member.user.mention async for member in chat.get_members() if not member.user.username.lower().endswith('bot')]
                text_part = "–≤—Å–µ—Ö –æ—Ç–º–µ—Ç–∏—Ç—å"

        ping_message = ' '.join(message.command[1:]) if len(message.command) > 1 else None
        mentions_messages = [' '.join(mentions[i:i + 50]) for i in range(0, len(mentions), 50)]  # 50
        if ping_message:
            mentions_messages[0] = ping_message + '\n' + mentions_messages[0]
        else:
            mentions_messages[0] = f"–í–ù–ò–ú–ê–ù–ò–ï‚ùóÔ∏è‚ùóÔ∏è‚ùó\n{message.from_user.mention} —Ä–µ—à–∏–ª(–∞) {text_part}\n" + mentions_messages[0]
        for mentions_message in mentions_messages:
            await message.reply(mentions_message)

    # @bot.on_message(text_command(["@–≤—Å–µ", "@all"]))
    async def ping_all(self, _, message: types.Message):
        await self.ping_func(message, PingGroup.ALL)

    # @bot.on_message(text_command("@–æ–±—â–∞–∂–Ω–∏–∫–∏"))
    async def ping_dorm(self, _, message: types.Message):
        await self.ping_func(message, PingGroup.DORM)

    # @bot.on_message(text_command("—à–∞—Ä"))
    async def a8ball(self, _, message: types.Message):
        if len(message.command) < 2:
            await message.reply("–Ø –Ω–µ –≤–∏–∂—É –≤–æ–ø—Ä–æ—Å–∞", quote=True)
            return

        ball_answers = [
            "–ë–µ—Å—Å–ø–æ—Ä–Ω–æ", "–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ", "–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π", "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞", "–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º",
            "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª", "–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ", "–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã", "–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª", "–î–∞",
            "–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞", "–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ", "–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å", "–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å", "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å",
            "–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π", "–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª", "–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ", "–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ"
        ]
        await message.reply(random.choice(ball_answers), quote=True)

    # @bot.on_message(filters.regex(r"^üé£ \[–†—ã–±–∞–ª–∫–∞\] üé£") & filters.user(200164142) & filters.chat(CHAT_ID))
    async def fishing_msg_deletion(self, _, message: types.Message):
        if you_receive := re.search(r"–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ (.+)", message.text):
            you_receive = you_receive[1]
        if energy_left := re.search(r"–≠–Ω–µ—Ä–≥–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å: (.+)", message.text):
            energy_left = energy_left[1]
        if you_receive and energy_left:
            text = f"{you_receive}\n{energy_left}"
        elif energy_left:
            text = f"–Ω–∏—á–µ–≥–æ\n{energy_left}"
        else:
            text = f"–Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏"
        await message.reply(text)
        await asyncio.sleep(1)
        await message.delete()

    # @bot.on_message(filters.media & filters.user(1264548383) & filters.chat(CHAT_ID))
    async def pipisa_bot_ad_remover(self, _, message: types.Message):
        await message.delete()
        await message.reply("—Ç—É—Ç –±—ã–ª–∞ —Ä–µ–∫–ª–∞–º–∞ @pipisabot, –∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –í–∞—à–∞")

    def toggle_config_variable(self, key: Union[str, ConfigKey]) -> bool:
        toggled = not self.config[key]
        self.config[key] = toggled
        Config.update(value=toggled).where(Config.key == key).execute()
        return toggled

    # @bot.on_message(chat_command("config"))
    async def config_command(self, _, message: types.Message):
        if len(message.command) < 2:
            await message.reply("–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
                                f"‚Ä¢ {ConfigKey.ANTI_FISHING} ‚Äî —Ä–µ–∂–∏–º –∞–Ω—Ç–∏-—Ä—ã–±–∞–ª–∫–∏\n"
                                f"‚Ä¢ {ConfigKey.ANTI_PIPISA_ADS} ‚Äî —Ä–µ–∂–∏–º –∞–Ω—Ç–∏-—Ä–µ–∫–ª–∞–º—ã –ø–∏–ø–∏—Å—ã", quote=True)
            return

        match message.command[1]:
            case ConfigKey.ANTI_FISHING:
                state = self.toggle_config_variable(ConfigKey.ANTI_FISHING)
                await message.reply(f"–†–µ–∂–∏–º –∞–Ω—Ç–∏-—Ä—ã–±–∞–ª–∫–∏ {'–≤–∫–ª—é—á–µ–Ω' if state else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
                return
            case ConfigKey.ANTI_PIPISA_ADS:
                state = self.toggle_config_variable(ConfigKey.ANTI_PIPISA_ADS)
                await message.reply(f"–†–µ–∂–∏–º –∞–Ω—Ç–∏-—Ä–µ–∫–ª–∞–º—ã –ø–∏–ø–∏—Å—ã {'–≤–∫–ª—é—á–µ–Ω' if state else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
                return
            case _:
                pass

    async def help_command(self, _, message: types.Message):
        await message.reply("‚Ä¢ **/set_nametag** (**/change_nametag**) ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞—à–∫—É\n"
                            "‚Ä¢ **/[un]restrict_member** ‚Äî –∑–∞–ø—Ä–µ—Ç–∏—Ç—å/—Ä–∞–∑—Ä–µ—à–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫—É –∏–∑–º–µ–Ω—è—Ç—å –ø–ª–∞—à–∫—É\n"
                            "‚Ä¢ **@__<–≥—Ä—É–ø–ø–∞>__** ‚Äî —É–ø–æ–º—è–Ω—É—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                            "‚Ä¢ **—à–∞—Ä** __<–≤–æ–ø—Ä–æ—Å>__ ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –º–Ω–µ–Ω–∏–µ —É —à–∞—Ä–∞\n"
                            "‚Ä¢ **/config** ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞\n"
                            "‚Ä¢ **/help** ‚Äî —ç—Ç–∞ –ø–æ–º–æ—â—å\n\n"
                            "||–ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º, –∑–∞–º–µ—á–∞–Ω–∏—è–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º ‚Äî @sqkrv||", parse_mode=pyrogram.enums.ParseMode.MARKDOWN)

    def run(self):
        self.bot.add_handler(MessageHandler(self.set_title_command, chat_command(["set_nametag", "change_nametag"])))
        self.bot.add_handler(MessageHandler(self.un_restrict_member_command, admin_command(["restrict_member", "unrestrict_member"])))
        self.bot.add_handler(MessageHandler(self.ping_all, text_command(["@–≤—Å–µ", "@all", "@—Ç–∏–ø–∞–≤—Å–µ"])))
        self.bot.add_handler(MessageHandler(self.ping_dorm, text_command("@–æ–±—â–∞–∂–Ω–∏–∫–∏")))
        self.bot.add_handler(MessageHandler(self.a8ball, text_command("—à–∞—Ä")))
        self.bot.add_handler(MessageHandler(self.fishing_msg_deletion, filters.regex(r"^üé£ \[–†—ã–±–∞–ª–∫–∞\] üé£") & filters.user(200164142) & filters.chat(CHAT_ID)))
        self.bot.add_handler(MessageHandler(self.pipisa_bot_ad_remover, (filters.reply_keyboard | filters.inline_keyboard) & filters.user(1264548383) & filters.chat(CHAT_ID)))
        self.bot.add_handler(MessageHandler(self.config_command, chat_command("config")))
        self.bot.add_handler(MessageHandler(self.help_command, filters.command("help")))
        print("Starting bot...")
        self.bot.run()

# bot.run()
